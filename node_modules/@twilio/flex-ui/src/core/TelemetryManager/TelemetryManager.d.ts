import * as FlexSDK from "@twilio/flex-sdk";
import { UIInteractionEvent } from "./UIInteractionEventsDelegate";
import { ProgrammabilityEvent } from "./ProgrammabilityEvents.definitions";
import { SessionStartEvent } from "./SessionStartEventDelegate";
import { FlexError } from "../../FlexError";
interface TelemetryContext {
    currentPluginName: string;
    currentPluginVersion: string;
}
declare class TelemetryManagerImpl {
    private readonly sentSDKTelemetryClients;
    private initialTaskChannels;
    private readonly uiInteractionEventsDelegate;
    private readonly programmabilityEventsDelegate;
    private readonly sessionStartEventDelegate;
    private readonly errorEventDelegate;
    private onReportMediaMessageSent;
    private onReportMediaMessageReceived;
    reportPluginInteraction: (payload: Record<string, any>) => void;
    private onAddProgrammabilityEvent;
    private compareTaskChannelDefinitions;
    setContext(context: TelemetryContext): void;
    resetContext(): void;
    initialize(client: FlexSDK.Client): void;
    reportProgrammabilityEvent: (event: ProgrammabilityEvent) => void;
    reportUIInteractionEvent: (event: UIInteractionEvent) => void;
    reportErrorEvent: (error: FlexError) => void;
    stopProgrammabilityGrouping: () => void;
    reportSessionStartEvent: (event: SessionStartEvent) => void;
    reportChatAutoJoinRetryStart: (taskSid: string) => void;
    reportChatAutoJoinRetryComplete: (taskSid: string, count: number) => void;
    reportSecondIncomingVoiceConnection: (taskSid?: string) => void;
    reportFlexEventListeners: (name: string, command: string) => void;
    reportSDKUsage: (name: string, pluginName?: string, pluginVersion?: string) => void;
    reportNotificationEvent: (name: string, command: string, options?: {}) => void;
    reportVoiceConnectionWithWrongSecret: (issue: "missing" | "mismatch", details: Record<string, string>) => void;
}
export declare const TelemetryManager: TelemetryManagerImpl;
export {};
